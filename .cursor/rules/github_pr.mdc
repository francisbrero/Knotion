---
description: When asked to create a github PR or pull request
globs: 
alwaysApply: false
---
 # GitHub Pull Request Workflow

When asked to create a PR or pull request, follow these steps after determining which repo to push to:

## Branch Creation
1. Create a new branch following the naming convention:
   ```
   feat/<feature-name>-<issue-description>
   ```
   Example: `feat/user-auth-fix-login-timeout`

## Code Commit & Push
1. Stage all changes:
   ```bash
   git add .
   ```

2. Create a commit with a clear message following conventional commits:
   ```bash
   git commit -m "feat(<scope>): <description>

   <body>
   <footer>"
   ```

3. Sync with master:
   ```bash
   git fetch origin master
   git rebase origin/master
   ```

4. Push the feature branch:
   ```bash
   git push -u origin feat/<feature-name>-<issue-description>
   ```

## Pull Request Creation
1. Create a PR to merge the feature branch into master with:
   - **Title**: Clear, concise description of the change
   - **Description**:
     ```
     ## What
     [Description of the changes made]

     ## Why
     [Explanation of why these changes are needed]

     ## How
     [Brief technical overview of implementation]

     ## Testing
     [How these changes were tested]
     ```

2. Return the PR URL to the user in Cursor

---

## Example Usage
When the user says "create a PR for the user authentication fixes", you should:
1. Create branch: `feat/user-auth-fixes`
2. Commit changes with message: "feat(auth): implement user authentication fixes"
3. Rebase with master
4. Push changes
5. Create PR with appropriate description
6. Return PR URL