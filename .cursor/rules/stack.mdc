---
description: This is the tech stack to use for this project
globs: 
alwaysApply: false
---
This document defines the stack to use for the KNotion project. Do not use a tech stack that is not included in this document and ask if you should update it when considering adding something new to it.

## **1. Frontend**

### **1.1 Chrome Extension**

- **Framework:** Vanilla JavaScript (with optional lightweight libraries)
- **State Management:** In-memory/localStorage (no persistent state needed)
- **Annotation Library:**
    - [`rangy`](mdc:https:/github.com/timdown/rangy) or [`@highlight-run/web`](mdc:https:/www.npmjs.com/package/@highlight-run/web) — used to track and serialize text selections with DOM context
- **Firebase SDK** for authentication and database interaction

### **1.2 Web Dashboard**

- **Framework:** React.js
- **Styling:** Tailwind CSS
- **Routing:** React Router
- **Authentication:** Firebase Auth with Google SSO
- **Data Handling:** Firestore client SDK
- **Hosting:** Firebase Hosting

---

## **2. Backend & Storage**

### **2.1 Firebase**

- **Authentication:** Firebase Auth (Google SSO only)
- **Database:** Firestore (NoSQL document store)
    - Users
    - Pages
    - Annotations (subcollection of pages)
    - Threads/Comments
    - Tags
    - Collections
- **Hosting:** Firebase Hosting (dashboard + extension landing page)
- **(Optional)**: Firebase Cloud Functions — for invite workflows and notifications (future)

### **2.2 Media/Content Storage**

- No snapshots or media storage required.
- All annotations reference live web pages only.

### 2.3 Data Storage Examples

**pages collection:**

```json
{
  "url": "https://example.com/article",
  "savedBy": "userId",
  "createdAt": Timestamp
}

```

### **annotations (subcollection under `pages`)**

Each annotation represents a highlight on a page and optionally links to a thread.

```json
{
  "text": "Selected text",
  "range": {
    "startOffset": 250,
    "endOffset": 320,
    "containerSelector": "div.article-body > p:nth-child(3)"
  },
  "createdBy": "userId",
  "createdAt": "timestamp",
  "threadId": "abc123"  // FK reference to threads collection
}
```

**threads (top-level collection)**

Each thread is a container for a discussion associated with an annotation.

```json

{
  "id": "abc123",
  "createdBy": "userId",
  "createdAt": "timestamp",
  "pageUrl": "https://example.com",
  "annotationId": "xyz789",  // Optional reverse lookup
  "participants": ["userId1", "userId2"], // for invite-only access
  "isPrivate": true
 }

```

---

### **comments (subcollection under `threads`)**

Each comment or reply in a thread.

```json

{
  "authorId": "userId",
  "content": "This part of the article is key to understanding...",
  "createdAt": "timestamp",
  "replyTo": "commentId"  // null for root comments, or ID of another comment
}

```

---

## **3. Tooling & DevOps**

- **Version Control:** GitHub
- **CI/CD:** GitHub Actions (build + deploy to Firebase Hosting)
- **Browser Extension Packaging:** Webpack
- **Environment Config:** `.env` file + Firebase project config

---

## **4. Optional/Deferred Tools**

- **Real-time Messaging:** Firebase Realtime DB or WebSocket layer (for live comment updates) ⇒ Optional
- **Error Monitoring:** Sentry
- **Analytics:** Firebase Analytics
- **Snapshot Storage:** Firebase Storage (if needed later)

---

## **5. Design Tools**

- **Wireframing & Prototypes:** Lovable
- **Design System:** Tailwind CSS base components + custom UI kit (to be developed)