rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function hasRequiredPageFields(data) {
      return data.keys().hasAll(['title', 'content', 'userId', 'createdAt']);
    }

    function hasRequiredAnnotationFields(data) {
      return data.keys().hasAll(['content', 'pageId', 'userId', 'createdAt']);
    }

    function hasRequiredThreadFields(data) {
      return data.keys().hasAll(['title', 'pageId', 'isPrivate', 'userId', 'createdAt']);
    }

    function hasValidPageTypes(data) {
      return 
        data.title is string &&
        data.content is string &&
        data.createdAt is timestamp &&
        data.userId is string;
    }

    function hasValidAnnotationTypes(data) {
      return 
        data.content is string &&
        data.pageId is string &&
        data.createdAt is timestamp &&
        data.userId is string;
    }

    function hasValidThreadTypes(data) {
      return 
        data.title is string &&
        data.pageId is string &&
        data.isPrivate is bool &&
        data.createdAt is timestamp &&
        data.userId is string;
    }

    // Pages collection rules
    match /pages/{pageId} {
      allow create: if isAuthenticated() &&
                      hasRequiredPageFields(request.resource.data) &&
                      hasValidPageTypes(request.resource.data) &&
                      isOwner(request.resource.data.userId);
      
      allow read: if isAuthenticated() &&
                    isOwner(resource.data.userId);
      
      allow update: if isAuthenticated() &&
                      isOwner(resource.data.userId) &&
                      hasValidPageTypes(request.resource.data);
      
      allow delete: if isAuthenticated() &&
                      isOwner(resource.data.userId);
    }

    // Annotations collection rules
    match /annotations/{annotationId} {
      allow create: if isAuthenticated() &&
                      hasRequiredAnnotationFields(request.resource.data) &&
                      hasValidAnnotationTypes(request.resource.data) &&
                      isOwner(request.resource.data.userId);
      
      allow read: if isAuthenticated() &&
                    isOwner(resource.data.userId);
      
      allow update: if isAuthenticated() &&
                      isOwner(resource.data.userId) &&
                      hasValidAnnotationTypes(request.resource.data);
      
      allow delete: if isAuthenticated() &&
                      isOwner(resource.data.userId);
    }

    // Threads collection rules
    match /threads/{threadId} {
      allow create: if isAuthenticated() &&
                      hasRequiredThreadFields(request.resource.data) &&
                      hasValidThreadTypes(request.resource.data) &&
                      isOwner(request.resource.data.userId);
      
      allow read: if isAuthenticated() &&
                    isOwner(resource.data.userId);
      
      allow update: if isAuthenticated() &&
                      isOwner(resource.data.userId) &&
                      hasValidThreadTypes(request.resource.data);
      
      allow delete: if isAuthenticated() &&
                      isOwner(resource.data.userId);
    }
  }
} 