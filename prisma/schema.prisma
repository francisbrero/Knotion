// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// NextAuth Models
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    
    // KNotion relationships
    links         Link[]          @relation("UserLinks")
    collections   Collection[]    @relation("UserCollections")
    comments      Comment[]       @relation("UserComments")
    notifications Notification[]  @relation("UserNotifications")
    tags          Tag[]           @relation("UserTags")
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// KNotion Core Models
model Link {
    id          String    @id @default(cuid())
    url         String
    title       String?
    description String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    
    // Relationships
    ownerId     String
    owner       User      @relation("UserLinks", fields: [ownerId], references: [id], onDelete: Cascade)
    collections LinkCollection[]
    tags        LinkTag[]
    comments    Comment[]

    @@index([ownerId])
    @@index([url])
}

model Tag {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    
    // Relationships
    ownerId   String
    owner     User      @relation("UserTags", fields: [ownerId], references: [id], onDelete: Cascade)
    links     LinkTag[]

    @@unique([ownerId, name])
    @@index([ownerId])
}

model Collection {
    id         String    @id @default(cuid())
    name       String
    visibility String    @default("PRIVATE") // PRIVATE or SHARED
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    
    // Relationships
    ownerId    String
    owner      User      @relation("UserCollections", fields: [ownerId], references: [id], onDelete: Cascade)
    links      LinkCollection[]
    invitations Invitation[]

    @@index([ownerId])
}

model LinkCollection {
    id           String     @id @default(cuid())
    createdAt    DateTime   @default(now())
    
    // Relationships
    linkId       String
    link         Link       @relation(fields: [linkId], references: [id], onDelete: Cascade)
    collectionId String
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

    @@unique([linkId, collectionId])
    @@index([linkId])
    @@index([collectionId])
}

model LinkTag {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    
    // Relationships
    linkId    String
    link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
    tagId     String
    tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([linkId, tagId])
    @@index([linkId])
    @@index([tagId])
}

model Comment {
    id            String    @id @default(cuid())
    text          String
    rangeStart    Int?
    rangeEnd      Int?
    rangeSelector String?   // Serialized DOM selection path
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    
    // Relationships
    linkId        String
    link          Link      @relation(fields: [linkId], references: [id], onDelete: Cascade)
    authorId      String
    author        User      @relation("UserComments", fields: [authorId], references: [id])
    parentId      String?
    parent        Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
    replies       Comment[] @relation("CommentReplies")

    @@index([linkId])
    @@index([authorId])
    @@index([parentId])
}

model Invitation {
    id           String    @id @default(cuid())
    inviteeEmail String
    role         String    // VIEW, COMMENT, or EDIT
    acceptedAt   DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    
    // Relationships
    collectionId String
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

    @@index([collectionId])
    @@index([inviteeEmail])
}

model Notification {
    id        String    @id @default(cuid())
    type      String    // COMMENT, REPLY, MENTION, etc.
    entityId  String    // ID of the related entity (comment, link, etc.)
    isRead    Boolean   @default(false)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    
    // Relationships
    userId    String
    user      User      @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([isRead])
} 